{"ast":null,"code":"import { productsReducer } from \"../reducers/productReducers\";\nimport { ADD_TO_CART, REMOVE_FROM_CART } from \"../types\";\nexport const addToCart = (items, products) => dispatch => {\n  const cartItems = items.slice(); //makes clone of items\n\n  let alreadyExists = false;\n  cartItems.forEach(x => {\n    if (x._id === product._id) {\n      alreadyExists = true;\n      x.count++;\n    }\n  });\n\n  if (!alreadyExists) {\n    cartItems.push({ ...product,\n      count: 1\n    }); //count is number of each product in the cart\n  }\n\n  dispatch({\n    type: ADD_TO_CART,\n    payload: {\n      cartItems\n    }\n  });\n  localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n};\nexport const removeFromCart = (items, product) => dispatch => {\n  const cartItems = items.slice().filter(x => x._id !== product._id //if item is not equal to product id then itwill be added to items\n  );\n  dispatch({\n    type: REMOVE_FROM_CART,\n    payload: {\n      cartItems\n    }\n  });\n  localStorage.setItem(JSON.stringify(cartItems));\n};","map":{"version":3,"sources":["/Users/Nicole/Desktop/GitHub/react-shopping-cart/src/actions/cartActions.js"],"names":["productsReducer","ADD_TO_CART","REMOVE_FROM_CART","addToCart","items","products","dispatch","cartItems","slice","alreadyExists","forEach","x","_id","product","count","push","type","payload","localStorage","setItem","JSON","stringify","removeFromCart","filter"],"mappings":"AAAA,SAASA,eAAT,QAAgC,6BAAhC;AACA,SAASC,WAAT,EAAsBC,gBAAtB,QAA8C,UAA9C;AAGA,OAAO,MAAMC,SAAS,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAsBC,QAAD,IAC9C;AACA,QAAMC,SAAS,GAAGH,KAAK,CAACI,KAAN,EAAlB,CADA,CACiC;;AACjC,MAAIC,aAAa,GAAG,KAApB;AAEAF,EAAAA,SAAS,CAACG,OAAV,CAAmBC,CAAC,IAAG;AACnB,QAAGA,CAAC,CAACC,GAAF,KAAUC,OAAO,CAACD,GAArB,EAAyB;AACrBH,MAAAA,aAAa,GAAG,IAAhB;AACAE,MAAAA,CAAC,CAACG,KAAF;AACH;AACJ,GALD;;AAOA,MAAG,CAACL,aAAJ,EAAkB;AACdF,IAAAA,SAAS,CAACQ,IAAV,CAAe,EAAC,GAAGF,OAAJ;AAAYC,MAAAA,KAAK,EAAE;AAAnB,KAAf,EADc,CACyB;AAC1C;;AACDR,EAAAA,QAAQ,CAAC;AACLU,IAAAA,IAAI,EAAEf,WADD;AAELgB,IAAAA,OAAO,EAAE;AAACV,MAAAA;AAAD;AAFJ,GAAD,CAAR;AAIAW,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAed,SAAf,CAAlC;AAGC,CAtBM;AAyBP,OAAO,MAAMe,cAAc,GAAG,CAAClB,KAAD,EAAQS,OAAR,KAAqBP,QAAD,IAAa;AAC/D,QAAMC,SAAS,GAAGH,KAAK,CAACI,KAAN,GAAce,MAAd,CACdZ,CAAC,IAAIA,CAAC,CAACC,GAAF,KAAUC,OAAO,CAACD,GADT,CACa;AADb,GAAlB;AAIAN,EAAAA,QAAQ,CAAC;AAACU,IAAAA,IAAI,EAACd,gBAAN;AACLe,IAAAA,OAAO,EAAE;AAACV,MAAAA;AAAD;AADJ,GAAD,CAAR;AAEIW,EAAAA,YAAY,CAACC,OAAb,CAAqBC,IAAI,CAACC,SAAL,CAAed,SAAf,CAArB;AACH,CARM","sourcesContent":["import { productsReducer } from \"../reducers/productReducers\";\nimport { ADD_TO_CART, REMOVE_FROM_CART } from \"../types\";\n\n\nexport const addToCart = (items, products) => (dispatch) =>\n{\nconst cartItems = items.slice(); //makes clone of items\nlet alreadyExists = false;\n\ncartItems.forEach( x=> {\n    if(x._id === product._id){\n        alreadyExists = true;\n        x.count++;\n    }\n});\n\nif(!alreadyExists){\n    cartItems.push({...product,count: 1}); //count is number of each product in the cart\n}\ndispatch({\n    type: ADD_TO_CART,\n    payload: {cartItems}\n});\nlocalStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n\n\n};\n\n\nexport const removeFromCart = (items, product) => (dispatch) =>{\nconst cartItems = items.slice().filter(\n    x => x._id !== product._id //if item is not equal to product id then itwill be added to items\n\n);\ndispatch({type:REMOVE_FROM_CART, \n    payload: {cartItems}});\n    localStorage.setItem(JSON.stringify(cartItems));\n};"]},"metadata":{},"sourceType":"module"}